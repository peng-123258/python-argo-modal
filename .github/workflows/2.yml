name: Deploy 3 Independent Apps to Modal

on:
  workflow_dispatch:
  schedule:
    - cron: '8 18 * * *'
  repository_dispatch:
    types: [service-down-alert]

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - instance: to
            app_file: to_app.py
          - instance: ysl
            app_file: ysl_app.py
          - instance: ny
            app_file: ny_app.py
      fail-fast: false

    env:
      MODAL_APP_NAME: proxy-${{ matrix.instance }}
      MODAL_USER_NAME: ${{ secrets.MODAL_USER_NAME }}
      SUB_PATH: ${{ secrets.SUB_PATH || 'sub' }}
      # 全局统一UUID（所有实例共用）
      GLOBAL_UUID: ${{ secrets.GLOBAL_UUID || 'shared-be16536e-5c3c-44bc-8cb7-b7d0ddc3d951' }}

    steps:
      - name: Check Trigger Event
        run: |
          echo "Workflow triggered by: ${{ github.event_name }}"
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            echo "触发事件类型: ${{ github.event.action }}，开始自动恢复部署 ${{ matrix.instance }} 实例..."
          else
            echo "开始部署 ${{ matrix.instance }} 实例..."
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: pip install modal fastapi requests

      - name: Authenticate Modal
        run: |
          modal token set --token-id ${{ secrets.MODAL_TOKEN_ID }} --token-secret ${{ secrets.MODAL_TOKEN_SECRET }}

      - name: Stop Existing App (Clean Deploy)
        run: |
          modal app stop ${{ env.MODAL_APP_NAME }} || echo "No existing app ${{ env.MODAL_APP_NAME }} to stop"

      - name: Create/Update Instance-specific Secret
        run: |
          # 实例名转为全大写（如 ysl → YSL）
          INSTANCE_UPPER=$(echo ${{ matrix.instance }} | tr '[:lower:]' '[:upper:]')
          SECRET_NAME=${INSTANCE_UPPER}-SECRETS
          # 删除旧Secret
          modal secret delete $SECRET_NAME --yes || true
          # 所有实例共用同一个GLOBAL_UUID
          modal secret create $SECRET_NAME \
            UUID='${{ env.GLOBAL_UUID }}' \  # 统一使用全局UUID
            MODAL_USER_NAME='${{ env.MODAL_USER_NAME }}' \
            ARGO_DOMAIN='${{ secrets[format('{0}_ARGO_DOMAIN', INSTANCE_UPPER)] }}' \
            ARGO_AUTH='${{ secrets[format('{0}_ARGO_AUTH', INSTANCE_UPPER)] }}' \
            ARGO_PORT='${{ secrets[format('{0}_ARGO_PORT', INSTANCE_UPPER)] || '8001' }}' \
            SUB_PATH='${{ env.SUB_PATH }}' \
            NAME='${{ secrets[format('{0}_NAME', INSTANCE_UPPER)] || matrix.instance }}' \
            CFIP='${{ secrets[format('{0}_CFIP', INSTANCE_UPPER)] || 'www.visa.com.tw' }}' \
            CFPORT='${{ secrets[format('{0}_CFPORT', INSTANCE_UPPER)] || '443' }}' \
            NEZHA_SERVER='${{ secrets[format('{0}_NEZHA_SERVER', INSTANCE_UPPER)] }}' \
            NEZHA_KEY='${{ secrets[format('{0}_NEZHA_KEY', INSTANCE_UPPER)] }}' \
            NEZHA_PORT='${{ secrets[format('{0}_NEZHA_PORT', INSTANCE_UPPER)] }}' \
            UPLOAD_URL='${{ secrets[format('{0}_UPLOAD_URL', INSTANCE_UPPER)] }}' \
            PROJECT_URL='${{ secrets[format('{0}_PROJECT_URL', INSTANCE_UPPER)] }}' \
            BOT_TOKEN='${{ secrets[format('{0}_BOT_TOKEN', INSTANCE_UPPER)] }}' \
            CHAT_ID='${{ secrets[format('{0}_CHAT_ID', INSTANCE_UPPER)] }}'

      - name: Deploy ${{ matrix.instance }} App to Modal
        run: |
          echo "部署实例: ${{ matrix.instance }}，文件: ${{ matrix.app_file }}"
          modal deploy ${{ matrix.app_file }}

      - name: Output Deployment URLs
        run: |
          echo "✅ ${{ matrix.instance }} 实例部署成功!"
          echo "--------------------------------------------------"
          echo "项目 URL: https://${{ env.MODAL_USER_NAME }}--${{ env.MODAL_APP_NAME }}-web_server.modal.run"
          echo "订阅 URL: https://${{ env.MODAL_USER_NAME }}--${{ env.MODAL_APP_NAME }}-web_server.modal.run/${{ env.SUB_PATH }}"
          echo "--------------------------------------------------"
